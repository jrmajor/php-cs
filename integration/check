#!/usr/bin/env php
<?php

namespace Major\CS\Integration;

use Closure;
use NunoMaduro\Collision\Provider as Collision;
use Psl\Async;
use Psl\Filesystem;
use Psl\IO;
use Psl\Str;
use Psl\Vec;

require_once __DIR__ . '/vendor/autoload.php';

(new Collision())->register();

const Dir = __DIR__ . '/../.cache/integration';

const Repos = [
    'arbor',
    'bajki-muza',
    'fluent-php',
    'laravel-fluent',
    'pluralrules',
];

define('Start', microtime(true));

Filesystem\create_directory(Dir);

$tasks = Vec\map(Repos, function (string $repo): Closure {
    return function () use ($repo): array {
        IO\write_line("\e[32mPreparing jrmajor/{$repo}...\e[0m");

        GitHubRepo::clone("jrmajor/{$repo}", Dir)->resetToRemote();

        Composer::load(Dir . "/{$repo}")
            ->addRepoPath('../../..')
            ->write()
            ->requireDev('jrmajor/cs', '*');

        IO\write_line("\e[32mChecking jrmajor/{$repo}...\e[0m");

        $result = PhpCsFixer::in(Dir . "/{$repo}")->dryRun();

        if ($result === null) {
            IO\write_line("\e[32mChecked jrmajor/{$repo}\e[0m");
        }

        return [$repo, $result];
    };
});

$out = Async\concurrently($tasks);

foreach ($out as [$repo, $result]) {
    if ($result === null) {
        continue;
    }

    IO\write_line("\e[33mViolations in jrmajor/{$repo}:\e[0m\n");

    foreach (Str\split($result, "\n") as $line) {
        echo "{$line}\n";
    }
}

IO\write_line("\n\e[32mChecked in %.2Fs\e[0m", microtime(true) - Start);
